generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Refresh_tokens {
  id            String    @id @map("_id") @db.VarChar(36)
  user_id       String    @db.VarChar(36)
  refresh_token String    @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  Users         Users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Refresh_tokens_ibfk_1")

  @@index([user_id], map: "user_id")
}

model Users {
  id                                     String           @id @map("_id") @db.VarChar(36)
  name                                   String?          @default("") @db.VarChar(100)
  email                                  String           @unique(map: "email") @db.VarChar(255)
  date_of_birth                          DateTime?        @db.Date
  gender                                 String?          @default("") @db.VarChar(20)
  password                               String?          @default("") @db.VarChar(255)
  created_at                             DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                             DateTime?        @default(now()) @db.Timestamp(0)
  forgot_password_token                  String?          @default("") @db.VarChar(100)
  google_id                              String?          @default("") @db.VarChar(100)
  verify                                 Int?             @default(0) @db.TinyInt
  role                                   Int?             @default(0) @db.TinyInt
  Refresh_tokens                         Refresh_tokens[]
  blogs                                  blogs[]
  bookings_bookings_customer_idToUsers   bookings[]       @relation("bookings_customer_idToUsers")
  bookings_bookings_consultant_idToUsers bookings[]       @relation("bookings_consultant_idToUsers")
}

model blogs {
  id        Int       @id @default(autoincrement())
  userId    String?   @db.VarChar(36)
  title     String?   @db.VarChar(255)
  summary   String?   @db.Text
  content   String?   @db.Text
  section1  String?   @db.Text
  section2  String?   @db.Text
  mainImage String?   @db.VarChar(255)
  subImage  String?   @db.VarChar(255)
  image     String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.DateTime(0)
  Users     Users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blogs_ibfk_1")

  @@index([userId], map: "userId")
}

model bookings {
  id                                  Int              @id @default(autoincrement())
  customer_id                         String           @db.VarChar(36)
  consultant_id                       String           @db.VarChar(36)
  date                                DateTime         @db.Date
  time                                DateTime         @db.Time(0)
  note                                String?          @db.Text
  confirmed_at                        DateTime?        @db.DateTime(0)
  canceled_at                         DateTime?        @db.DateTime(0)
  canceled_by                         String?          @db.VarChar(36)
  status                              bookings_status? @default(pending)
  created_at                          DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                          DateTime?        @default(now()) @db.Timestamp(0)
  Users_bookings_customer_idToUsers   Users            @relation("bookings_customer_idToUsers", fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookings_ibfk_1")
  Users_bookings_consultant_idToUsers Users            @relation("bookings_consultant_idToUsers", fields: [consultant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookings_ibfk_2")

  @@index([consultant_id], map: "consultant_id")
  @@index([customer_id], map: "customer_id")
}

enum bookings_status {
  pending
  approved
  rejected
}
